import classesHome from './Home.module.css'
import { Helmet } from 'react-helmet'

const Home = () => {
	return (
		<>
			<Helmet>
				<title>Home | SRS-Maker</title>
				<meta
					name='description'
					content='SRS (software requirements specification, спецификация требований к программному обеспечению) — документ с требованиями к приложению, по-нашему — техническое задание.'
				/>
			</Helmet>
			<main>
				<div className={classesHome.container}>
					<h2 className={classesHome.mainPage__h2}>Что такое SRS?</h2>
					<p className={classesHome.mainPage__part}>
						SRS (software requirements specification, спецификация требований к
						программному обеспечению) — документ с требованиями к приложению,
						по-нашему — техническое задание. В эсэрэску входят требования и
						ограничения по функциональности и производительности SRS составляют
						для прозрачного взаимодействия заказчика и подрядчика.
					</p>
					<p className={classesHome.mainPage__part}>
						SRS обычно пишут простым «клиентским» языком, потому что и
						составляется он на основе мнения клиента. Чтобы начать
						сотрудничество, подрядчику необходимо узнать, чего хочет заказчик,
						понять желания и бизнес-цели. На основе информации с нескольких
						созвонов на стороне подрядчика составляют SRS документ.
					</p>

					<h2 className={classesHome.mainPage__h2}>Структура</h2>
					<p className={classesHome.mainPage__part}>
						Структура SRS документа включает в себя детальное описание каждой
						части будущего приложения. Проблема в том, что 90% информации в
						таком документе — вода; настоящую пользу несут разве что картинки —
						примеры дизайна и описания работы сложных алгоритмов.
					</p>
					<p className={classesHome.mainPage__part}>
						Структура спецификации требований к программному обеспечению
						выглядит так:
					</p>

					<ul className={classesHome.mainPage__list}>
						<li className={classesHome.mainPage__item}>
							Введение
							<ul>
								<li>Цели</li>
								<li>Соглашения о терминах</li>
								<li>
									Предполагаемая аудитория и последовательность восприятия
								</li>
								<li>Масштаб проекта</li>
								<li>Ссылки на источники</li>
							</ul>
						</li>
						<li className={classesHome.mainPage__item}>
							Общее описание
							<ul>
								<li>Видение продукта</li>
								<li>Функциональность продукта</li>
								<li>Классы и характеристики пользователей</li>
								<li>Среда функционирования продукта (операционная среда)</li>
								<li>Рамки, ограничения, правила и стандарты</li>
								<li>Документация для пользователей</li>
								<li>Допущения и зависимости</li>
							</ul>
						</li>
						<li className={classesHome.mainPage__item}>
							Функциональность системы
							<ul>
								<li>
									Функциональный блок X (таких блоков может быть несколько)
								</li>
								<li>Описание и приоритет</li>
								<li>
									Причинно-следственные связи, алгоритмы (движение процессов,
									workflows)
								</li>
								<li>Функциональные требования</li>
							</ul>
						</li>
						<li className={classesHome.mainPage__item}>
							Требования к внешним интерфейсам
							<ul>
								<li>Интерфейсы пользователя (UX)</li>
								<li>Программные интерфейсы</li>
								<li>Интерфейсы оборудования</li>
								<li>Интерфейсы связи и коммуникации</li>
							</ul>
						</li>
						<li className={classesHome.mainPage__item}>
							Нефункциональные требования
							<ul>
								<li>Требования к производительности</li>
								<li>Требования к сохранности (данных)</li>
								<li>Критерии качества программного обеспечения</li>
								<li>Требования к безопасности системы</li>
							</ul>
						</li>
						<li className={classesHome.mainPage__item}>
							Прочие требования
							<ul>
								<li>Приложение А: Глоссарий</li>
								<li>
									Приложение Б: Модели процессов предметной области и другие
									диаграммы
								</li>
								<li>Приложение В: Список ключевых задач</li>
							</ul>
						</li>
					</ul>

					{/* Дополнительные секции */}
					{/* Каждая секция должна следовать той же структуре */}

					{/* Релевантность */}
					<h2 className={classesHome.mainPage__h2}>Релевантность</h2>
					<p className={classesHome.mainPage__part}>
						Как бы ни хотелось рассказать в SRS документе о преимуществах
						компании или идеях, которые пришли в голову уже в процессе
						разработки, делать это запрещено. У документа — четкая цель, а
						значит, такое же четкое содержание. SRS всегда отражает
						функциональность и технические характеристики продукта.
					</p>

					{/* Прозрачность */}
					<h2 className={classesHome.mainPage__h2}>Прозрачность</h2>
					<p className={classesHome.mainPage__part}>
						Здесь речь о терминах и языке. Используйте язык клиента, но не
						переборщите с упрощением, эвфемизмами и литературными приемами. Не
						стоит писать о волшебном труде мастеров кода и гениальных выдумках
						повелителей картинок. Лучше быть излишне конкретным, чем
						двусмысленным. Спецификация требований к программному обеспечению —
						не шедевр мировой классики, поэтому даже самые элементарные
						стилистические правила можно игнорировать во имя ясности.
					</p>

					{/* Точность */}
					<h2 className={classesHome.mainPage__h2}>Точность</h2>
					<p className={classesHome.mainPage__part}>
						Сокращения, аббревиатуры, названия — в документе они должны не
						должны отличаться. На первый взгляд — мелочь, но поскольку документ
						носит официальный характер, ошибаться в подобных моментах не стоит.
					</p>

					{/* Рейтинг по важности */}
					<h2 className={classesHome.mainPage__h2}>Рейтинг по важности</h2>
					<p className={classesHome.mainPage__part}>
						Никаких «два пишу, четыре в уме»! Если на исполнение того или иного
						требования уйдет много времени, стоит поставить для него высокий
						приоритет. В целом ранжирование требований по важности и
						стабильности — хорошая идея. Под стабильностью мы понимаем,
						насколько точно поставили задачу, и придется ли что-то менять в
						процессе исполнения.
					</p>
				</div>
			</main>
		</>
	)
}

export { Home }
